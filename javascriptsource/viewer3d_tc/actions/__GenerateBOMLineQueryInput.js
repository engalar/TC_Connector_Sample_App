// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {MxObject} createBomWindowInput
 * @returns {Promise.<string>}
 */
export async function __GenerateBOMLineQueryInput(createBomWindowInput) {
	// BEGIN USER CODE
	let itemRev = createBomWindowInput.get("TcConnector.itemRev__BOMWindow");
	let revRuleConfigInfo = createBomWindowInput.get("TcConnector.revRule__BOMWindow");
	let bomWinPropFlagMap = createBomWindowInput.get("TcConnector.bomWinPropFlagMap");
	let objectsForConfigure = await new Promise(function (resolve, reject) {
		mx.data.get({
			guid: createBomWindowInput.getGuid(),
			path: "TcConnector.objectsForConfigure",
			callback: function(objs) {
				let variants = [];
				for (let obj of objs) {
					if (obj.get("isVariantRuleSelected")) {
						variants.push(obj.getGuid());
					}
				}
	            resolve(variants.length > 0 ? variants : null);
			},
			error: function(error) {
				resolve(null);
			}
		});
	});		

	let guids = [];
	if (itemRev) {
		guids.push(itemRev);
	}
	if (revRuleConfigInfo) {
		guids.push(revRuleConfigInfo);
	}
	if (bomWinPropFlagMap) {
		guids.push(bomWinPropFlagMap);
	}
	if (objectsForConfigure) {
		guids.push(...objectsForConfigure);
	}

	let queryInput = await new Promise(function (resolve, reject) {
		mx.data.get({
			guids: guids,
			callback: function(objs) {
				let query = {};
				objs.forEach((obj) => {
					let type = obj.getEntity();
					let uid = obj.get("UID");
					switch (type) {
						case "TcConnector.ItemRevision":
							query.itemRev = {
								"uid": uid
							};
							break;
						case "TcConnector.RevisionRule":
							if (uid !== "" && uid !== "AAAAAAAAAAAAAA") {
								query.revRuleConfigInfo = {
									"revRule": {
										"uid": uid
									}
								};
							}
							break;
						case "TcConnector.VariantRule":
						case "Viewer3D_TC.VariantRule":
							if (uid !== "" && uid !== "AAAAAAAAAAAAAA") {
								if (!query.objectsForConfigure) {
									query.objectsForConfigure = [];
								}
								query.objectsForConfigure.push({
									"uid": uid
								});
							}
							break;
						case "TcConnector.BomWindowPropFlagMap":
							query.bomWinPropFlagMap = {
								"show_unconfigured_variants": obj.get("show_unconfigured_variants"),
								"show_unconfigured_changes": obj.get("show_unconfigured_changes"),
								"show_suppressed_occurrences": obj.get("show_suppressed_occurrences"),
								"is_packed_by_default": obj.get("is_packed_by_default"),
								"show_out_of_context_lines": obj.get("show_out_of_context_lines"),
								"fnd0show_uncnf_occ_eff": obj.get("fnd0show_uncnf_occ_eff"),
								"fnd0bw_in_cv_cfg_to_load_md": obj.get("fnd0bw_in_cv_cfg_to_load_md")
							}
							break;
					}
				});
	            resolve(JSON.stringify(query));
			},
			error: function(error) {
				reject("Could not get objects:" + error.message);
			}
		});
	});

	return btoa(encodeURIComponent(queryInput).replace(/%([0-9A-F]{2})/g, (match, p1) => {
		return String.fromCharCode("0x" + p1);
	}));
	// END USER CODE
}
